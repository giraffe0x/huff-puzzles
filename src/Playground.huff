

#define function result1Int(uint256) payable returns(uint256)
#define function multiply(uint256, uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    // Push first 4 bytes of calldata to stack
    0x00 calldataload   // [calldata @ 0x00]
    0xE0 shr            // [func_sig] // Shift right by 224 bits

    // Compare the first 4 bytes of calldata to the first 4 bytes of multiply
    __FUNC_SIG(multiply)    // [multiply_sig, func_sig]
    eq                      // [multiply_sig == func_sig]

    // If equal, jump to multiply
    multiply jumpi

    // Else, revert
    0x00 0x00 revert

    // Create jump label
    multiply:
        // Push first 32 bytes (offset 4) of calldata to stack
        0x04 calldataload   // [a]
        0x24 calldataload   // [a, b]
        MULTIPLY()          // [result]


    // Store value in memory offset 0
    0x00 mstore          // []

    // Return the value at memory offset 0
    0x20  // [32]
    0x00  // [0, 32]
    return
}

#define macro MULTIPLY() = takes(2) returns (1) {
    // [b, a]

    // Check that b = 0
    dup1            // [b, b, a]
    iszero          // [b == 0, b, a]
    normalMul jumpi

    // check that a == (a * b) / b
    // [b, a]
    dup2            // [a, b, a]
    dup2            // [b, a, b, a]
    dup2            // [a, b, a, b, a]
    dup2            // [b, a, b, a, b, a]
    mul             // [a * b, b, a, b, a]
    div             // [(a * b) / b, a, b, a]
    eq              // [(a * b) / b == a, b, a]
    normalMul jumpi

    0x00 0x00 revert

    normalMul:
      // [b, a]
      mul             // [a * b]
}
